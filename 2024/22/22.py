#!/usr/bin/env python3

"""
https://adventofcode.com/2024/day/22
Day 22: Monkey Market
"""

from collections import defaultdict, deque
from collections.abc import Iterator
from functools import cache
from itertools import pairwise, repeat


def main():
    ex1_data = get_input('./example1.txt')
    ex2_data = get_input('./example2.txt')
    data = get_input('./input.txt')
    
    print('example 1:', part_1(ex1_data), '= 37327623?', '\n')
    print('part 1:',    part_1(data),                    '\n')  # 14082561342
    print('example 2:', part_2(ex2_data), '= 23?',       '\n')
    print('part 2:',    part_2(data),                    '\n')  # 1568
    #print(evolve.cache_info())

def get_input(file='./input.txt'):
    with open(file, 'r') as f:
        data = tuple(int(n) for n in f)
    return data

def part_1(data: tuple[int, ...]) -> int:
    '''What is the sum of the 2000th secret number generated by each buyer?'''
    return sum(cycle(secret, 2000) for secret in data)

def part_2(data: tuple[int, ...]) -> int:
    '''Figure out the best sequence to tell the monkey so that by looking for
    that same sequence of changes in every buyer's future prices, you get the
    most bananas in total.  What is the most bananas you can get?'''
    seqs: dict[tuple, int] = defaultdict(int)
    for secret in data:
        last_4 = deque(maxlen=4)
        seen = set()
        for last, current in pairwise(prices(secret, 2000)):
            last_4.append(current - last)
            seq = tuple(last_4)
            if seq not in seen:
                seen.add(seq)
                seqs[seq] += current
    best_seq, best_total = max(seqs.items(), key=lambda s: s[1])
    #print(best_seq)
    return best_total

@cache  # helps, but less than I thought
def evolve(secret: int) -> int:
    '''Change secret number into the next secret number'''
    secret ^= secret << 6  & 0xFFFFFF  # * 64, mix, prune
    secret ^= secret >> 5  & 0xFFFFFF  # // 32, mix, prune
    secret ^= secret << 11 & 0xFFFFFF  # * 2048, mix, prune
    return secret

def cycle(secret: int, n: int = 2000) -> int:
    '''Evolve secret number `n` times, return final secret number'''
    for _ in repeat(None, n):
        secret = evolve(secret)
    return secret

def prices(secret: int, n: int = 2000) -> Iterator[int]:
    '''Evolve secret number `n` times, yield price each time'''
    yield secret % 10
    for _ in repeat(None, n):
        secret = evolve(secret)
        yield secret % 10


if __name__ == '__main__':
    import sys
    sys.exit(main())
